import drake
import drake.cxx

libs = None
include_path = None

def configure(cxx_config = drake.cxx.Config(),
              cxx_toolkit = drake.cxx.Toolkit(),
              prefix = drake.Path('/usr')):

  global include_path
  global libs

  #
  # Config.
  #
  prefix = drake.Path(prefix)
  cxx_config.flag('-std=c++11')
  include_path = drake.Path('include')
  cxx_config.add_local_include_path(include_path)

  #
  # Rules.
  #
  rule_lib = drake.Rule('lib')
  rule_install = drake.Rule('install')

  #
  # Sources.
  #
  sources = drake.nodes(
    'include/internal/catch_uncaught_exceptions.cpp',
    'include/internal/catch_interfaces_registry_hub.cpp',
    'include/internal/catch_matchers_floating.cpp',
    'include/internal/catch_test_spec_parser.cpp',
    'include/internal/catch_section_info.cpp',
    'include/internal/catch_fatal_condition.cpp',
    'include/internal/catch_benchmark.cpp',
    'include/internal/catch_tag_alias.cpp',
    'include/internal/catch_test_case_info.cpp',
    'include/internal/catch_config.cpp',
    'include/internal/catch_message.cpp',
    'include/internal/catch_test_registry.cpp',
    'include/internal/catch_interfaces_testcase.cpp',
    'include/internal/catch_debug_console.cpp',
    'include/internal/catch_matchers.cpp',
    'include/internal/catch_session.cpp',
    'include/internal/catch_random_number_generator.cpp',
    'include/internal/catch_interfaces_config.cpp',
    'include/internal/catch_test_case_registry_impl.cpp',
    'include/internal/catch_test_spec.cpp',
    'include/internal/catch_assertionhandler.cpp',
    'include/internal/catch_xmlwriter.cpp',
    'include/internal/catch_reporter_registry.cpp',
    'include/internal/catch_assertionresult.cpp',
    'include/internal/catch_startup_exception_registry.cpp',
    'include/internal/catch_interfaces_reporter.cpp',
    'include/internal/catch_debugger.cpp',
    'include/internal/catch_list.cpp',
    'include/internal/catch_test_case_tracker.cpp',
    'include/internal/catch_common.cpp',
    'include/internal/catch_interfaces_capture.cpp',
    'include/internal/catch_tag_alias_registry.cpp',
    'include/internal/catch_interfaces_exception.cpp',
    'include/internal/catch_stream.cpp',
    'include/internal/catch_approx.cpp',
    'include/internal/catch_capture_matchers.cpp',
    'include/internal/catch_totals.cpp',
    'include/internal/catch_string_manip.cpp',
    'include/internal/catch_result_type.cpp',
    'include/internal/catch_output_redirect.cpp',
    'include/internal/catch_matchers_generic.cpp',
    'include/internal/catch_section.cpp',
    'include/internal/catch_timer.cpp',
    'include/internal/catch_exception_translator_registry.cpp',
    'include/internal/catch_commandline.cpp',
    'include/internal/catch_decomposer.cpp',
    'include/internal/catch_leak_detector.cpp',
    'include/internal/catch_interfaces_runner.cpp',
    'include/internal/catch_tag_alias_autoregistrar.cpp',
    'include/internal/catch_tostring.cpp',
    'include/internal/catch_context.cpp',
    'include/internal/catch_version.cpp',
    'include/internal/catch_errno_guard.cpp',
    'include/internal/catch_run_context.cpp',
    'include/internal/catch_stringref.cpp',
    'include/internal/catch_console_colour.cpp',
    'include/internal/catch_matchers_string.cpp',
    'include/internal/catch_wildcard_pattern.cpp',
    'include/internal/catch_registry_hub.cpp',
    'include/reporters/catch_reporter_xml.cpp',
    'include/reporters/catch_reporter_listening.cpp',
    'include/reporters/catch_reporter_bases.cpp',
    'include/reporters/catch_reporter_console.cpp',
    'include/reporters/catch_reporter_compact.cpp',
    'include/reporters/catch_reporter_junit.cpp',

    'include/catch_with_main.hpp',
    'include/catch.hpp',
    'include/internal/catch_matchers_generic.hpp',
    'include/internal/catch_reporter_registrars.hpp',
    'include/internal/catch_capture.hpp',
    'include/internal/catch_objc_arc.hpp',
    'include/internal/catch_option.hpp',
    'include/internal/catch_default_main.hpp',
    'include/internal/catch_impl.hpp',
    'include/internal/catch_to_string.hpp',
    'include/internal/catch_objc.hpp',
    'include/internal/catch_config.hpp',
    'include/reporters/catch_reporter_automake.hpp',
    'include/reporters/catch_reporter_bases.hpp',
    'include/reporters/catch_reporter_tap.hpp',
    'include/reporters/catch_reporter_teamcity.hpp',
    'include/external/clara.hpp',
  )

  #
  # Libraries.
  #
  lib = drake.cxx.DynLib(
    'lib/catch',
    sources,
    cxx_toolkit,
    cxx_config)
  rule_lib << lib
  libs = [lib]

  #
  # Install.
  #
  rule_install << drake.copy([f for f in sources if isinstance(f, drake.cxx.Header)], prefix)
  rule_install << drake.copy(libs, prefix)
